[
  first thing we create is Layout(structuring Layout).
]

[
  React.Fragment is a component which is exported by React.

  allows us to group list of elements or childs without using extra div or node in DOM
]

img:
[
  instead of importing image and using it.

  use this -> <img src={ require('./images/image1.jpg') } />
]

to flex the items
[
  flex-wrap: wrap;  --> makes the items flex properly on screen and then automatically goes to next row.

  we can use grid as well.
]


Q: Is JSX mandatory for React?
[
  A: JSX is an Extension Syntax that allows writing HTML and Javascript together easily 
  in React and is used to create React elements. These elements are then rendered to the 
  React DOM. Each JSX element is just to make use of React easy and for calling 
  React.createElement(component, props, â€¦children) with less work. So, anything that is 
  done with JSX can also be done with just plain JavaScript. So JSX is not mandatory but 
  is used for writing better and clean code instead of writing code using React.CreateElement.
]

Example of JSX
const sample = <h2>Greetings</h2>;


Destructure on the fly:
[
  const RestaurantCard = ({ name, cuisines, cloudinaryImageId, avgRating })

  if I want to Destructure on the fly then I have to pass all of them as individual props

  <RestaurantCard name = {restaurantList[0].info.name} cuisines = {restaurantList[0].info.cuisines} ..... />

  AND THERE IS ONE SHORTCUT TO PASS ALL PROPS AT ONCE(USING 'SPREAD' OPERATOR)
  <RestaurantCard {...restaurantList[0].info}
]

Virtual DOM:
[
  we keep a representation of DOM with us and this is known as VirtualDOM.

  why VirtualDOM?
  [
    we need VirtualDOM for reconciliation in React.

    coz when React does reconciliation
  ]
]

Reconciliation(the process is called as reconciliation):
[
  It is an Diff algorithm that React uses to diff one tree from other and it determines what needs to change in UI 
  and what does not need to change in UI, and just changes what needs to be changed(only re-renders what is changed).
]


keys in React:
[
  suppose you have multiple children with same attribute(like all are div or all are span), now can't differentiate between them.

  so now React will re-render all the attribute again even though they are not changed.

  therefore React needs key for same elements so that it can know which element was changed and then re-renders it.
]

[
  React does not need key if all the siblings have different attribute(like one is img, one is div, one is span, ...)
]

keys assignment
[
  no keys <<<<<< index as keys << unique keys
]

React Fiber
[
  it is a new React Reconciliation algorithm
]

props:
[
  it is just like arguments in a function.
  and functional component is just like a function.
]